{"version":3,"sources":["Components/Header.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","class","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","height","width","src","React","Component","Footer","className","style","color","backgroundColor","fontFamily","opacity","fontSize","target","App","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OA+CeA,E,uKA1Cf,OAEA,6BAEA,yBAAKC,MAAM,+CACT,4BAAQA,MAAM,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,cAAY,uBAAuBC,gBAAc,sBAAsBC,gBAAc,QAAQC,aAAW,qBAC1K,0BAAMN,MAAM,yBAEd,yBAAKA,MAAM,2BAA2BO,GAAG,uBACvC,uBAAGP,MAAM,eAAeQ,KAAK,KAAI,yBAAKC,OAAO,KAAKC,MAAM,MAAMC,IAAI,4DAEtE,wBAAIX,MAAM,uBAER,0BAAMA,MAAM,gBAGV,wBAAIA,MAAM,mCACR,wBAAIA,MAAM,mBACR,uBAAGA,MAAM,WAAWQ,KAAK,KAAzB,QAAkC,0BAAMR,MAAM,WAAZ,eAEpC,wBAAIA,MAAM,YACR,uBAAGA,MAAM,WAAWQ,KAAK,KAAzB,aAEF,wBAAIR,MAAM,YACR,uBAAGA,MAAM,WAAWQ,KAAK,KAAzB,UAEF,wBAAIR,MAAM,YACR,uBAAGA,MAAM,WAAWQ,KAAK,KAAzB,oB,GA7BaI,IAAMC,WCkBZC,E,uKAff,OACA,6BAGA,yBAAKC,UAAU,mBAAmBC,MAAO,CAACC,MAAO,QAASC,gBAAkB,YAAa,0BAAMF,MAAO,CAACG,WAAW,aAAcC,QAAS,GAAMC,SAAU,SAAUJ,MAAO,UAAjF,wBACzF,uBAAGT,KAAK,+DAA+Dc,OAAO,SAASN,MAAO,CAACC,MAAO,UAAtG,oC,GARqBL,IAAMC,WCqBZU,MAhBf,WACE,OACE,6BACA,kBAAC,EAAD,MAEJ,yBAAKR,UAAU,SACf,yBAAMJ,IAAI,gEAAgEa,IAAI,MAK1E,kBAAC,EAAD,QCPgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c91b978b.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css'\r\n\r\nclass Header extends React.Component{\r\nrender(){\r\nreturn(\r\n\r\n<div>\r\n\r\n<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo01\" aria-controls=\"navbarTogglerDemo01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n  <div class=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\r\n    <a class=\"navbar-brand\" href=\"#\"><img height=\"65\" width=\"100\" src=\"https://www.athmin.com/img/hiredeveloper/gif/react.gif\" /></a>\r\n\r\n<ul class=\"navbar-nav mr-auto\">\r\n</ul>\r\n  <span class=\"navbar-text\"></span>\r\n\r\n\r\n    <ul class=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n      <li class=\"nav-item active\">\r\n        <a class=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link\" href=\"#\">Products</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link\" href=\"#\">About</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link\" href=\"#\">Contact</a>\r\n      </li>\r\n      \r\n    </ul>\r\n   \r\n  </div>\r\n</nav>\r\n\r\n</div>\r\n\r\n)\r\n\r\n}\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport '../App.css';\r\n\r\nclass Footer extends React.Component{\r\nrender(){\r\n\r\nreturn(\r\n<div>\r\n\r\n\r\n<div className=\"text-center py-3\" style={{color: \"white\", backgroundColor : \"#090909\"}} ><span style={{fontFamily:\"sans-serif\", opacity: 0.8,  fontSize: \"14.4px\", color: \"white\"}}> Â© 2020 Copyright:\r\n<a href=\"https://github.com/Daniyalzakir321/Web-MobileApp-Development\" target=\"_blank\" style={{color: \"white\"}}>Muhammad Daniyal (WM5912)</a></span>\r\n</div>\r\n\r\n</div>\r\n \r\n)\r\n\r\n}\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\n\n\n\n\nfunction App() {\n  return (\n    <div>\n    <Header/>\n\n<div className=\"image\">\n<img  src=\"https://miro.medium.com/max/1904/1*_-zOFj444wI5ENPZW2iP2g.gif\" alt=\"\"/>\n\n</div>\n\n\n    <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}